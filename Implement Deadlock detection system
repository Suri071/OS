#include <stdio.h>
#include <stdbool.h>

#define MAX_PROCESSES 5
#define MAX_RESOURCES 3

int allocation[MAX_PROCESSES][MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int available[MAX_RESOURCES];
bool marked[MAX_PROCESSES];

void initialize() {
    // Initialize allocation and max matrices
    // ...

    // Initialize available resources
    // ...

    // Initialize marked array
    for (int i = 0; i < MAX_PROCESSES; i++) {
        marked[i] = false;
    }
}

bool isMarked(int process) {
    for (int i = 0; i < MAX_RESOURCES; i++) {
        if (allocation[process][i] > 0) {
            return true;
        }
    }
    return false;
}

void mark(int process) {
    for (int i = 0; i < MAX_RESOURCES; i++) {
        marked[process] = true;
    }
}

void detectDeadlock() {
    bool deadlockDetected = false;

    for (int i = 0; i < MAX_PROCESSES; i++) {
        if (!marked[i]) {
            for (int j = 0; j < MAX_RESOURCES; j++) {
                if (max[i][j] - allocation[i][j] > available[j]) {
                    deadlockDetected = true;
                    printf("Deadlock detected at process %d\n", i);
                    mark(i);
                    break;
                }
            }
        }
    }

    if (!deadlockDetected) {
        printf("No deadlock detected\n");
    }
}

int main() {
    initialize();

    detectDeadlock();

    return 0;
}
