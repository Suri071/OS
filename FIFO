#include <stdio.h>

#define NUM_FRAMES 3
#define NUM_PAGES 10

int frames[NUM_FRAMES];
int pages[NUM_PAGES];
int page_faults = 0;

void initializeFrames() {
    for (int i = 0; i < NUM_FRAMES; i++) {
        frames[i] = -1; // Initialize frames to -1 (indicating an empty frame)
    }
}

int findLRUIndex() {
    int min = frames[0], index = 0;
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] < min) {
            min = frames[i];
            index = i;
        }
    }
    return index;
}

int isPageInFrames(int page) {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] == page) {
            return 1;
        }
    }
    return 0;
}

void printFrames() {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] == -1) {
            printf("- ");
        } else {
            printf("%d ", frames[i]);
        }
    }
    printf("\n");
}

void simulatePaging() {
    for (int i = 0; i < NUM_PAGES; i++) {
        printf("Accessing Page %d: ", pages[i]);
        
        if (!isPageInFrames(pages[i])) {
            page_faults++;
            
            int emptyIndex = -1;
            for (int j = 0; j < NUM_FRAMES; j++) {
                if (frames[j] == -1) {
                    emptyIndex = j;
                    break;
                }
            }
            
            if (emptyIndex != -1) {
                frames[emptyIndex] = pages[i];
            } else {
                int replaceIndex = findLRUIndex();
                frames[replaceIndex] = pages[i];
            }
        }
        
        printFrames();
    }
}

int main() {
    printf("Enter the sequence of page references (0-9):\n");
    for (int i = 0; i < NUM_PAGES; i++) {
        scanf("%d", &pages[i]);
    }
    
    initializeFrames();
    simulatePaging();
    
    printf("Total Page Faults: %d\n", page_faults);
    
    return 0;
}
