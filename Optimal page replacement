#include <stdio.h>
#include <stdbool.h>
#include <limits.h>

#define NUM_FRAMES 3
#define NUM_PAGES 10

int frames[NUM_FRAMES];
int pages[NUM_PAGES];
int page_faults = 0;
int next_replace = 0;

void initializeFrames() {
    for (int i = 0; i < NUM_FRAMES; i++) {
        frames[i] = -1; // Initialize frames to -1 (indicating an empty frame)
    }
}

bool isPageInFrames(int page) {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] == page) {
            return true;
        }
    }
    return false;
}

int findNextReference(int start) {
    for (int i = start; i < NUM_PAGES; i++) {
        if (!isPageInFrames(pages[i])) {
            return i;
        }
    }
    return INT_MAX;
}

void replacePage(int page) {
    frames[next_replace] = page;
    next_replace = (next_replace + 1) % NUM_FRAMES;
}

void simulateOptimal() {
    for (int i = 0; i < NUM_PAGES; i++) {
        printf("Accessing Page %d: ", pages[i]);
        
        if (!isPageInFrames(pages[i])) {
            page_faults++;
            int max_future_reference = -1;
            int page_to_replace = -1;
            
            for (int j = 0; j < NUM_FRAMES; j++) {
                int next_reference = findNextReference(i + 1);
                if (next_reference > max_future_reference) {
                    max_future_reference = next_reference;
                    page_to_replace = j;
                }
            }
            
            replacePage(pages[i]);
        }
        
        for (int j = 0; j < NUM_FRAMES; j++) {
            if (frames[j] == -1) {
                printf("- ");
            } else {
                printf("%d ", frames[j]);
            }
        }
        printf("\n");
    }
}

int main() {
    initializeFrames();

    printf("Enter the sequence of page references (0-9):\n");
    for (int i = 0; i < NUM_PAGES; i++) {
        scanf("%d", &pages[i]);
    }

    simulateOptimal();

    printf("Total Page Faults: %d\n", page_faults);

    return 0;
}
