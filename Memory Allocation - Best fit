#include <stdio.h>

#define MEMORY_SIZE 100
#define MAX_BLOCKS 10

int memory[MEMORY_SIZE];
int blocks[MAX_BLOCKS];
int num_blocks;

void initializeMemory() {
    for (int i = 0; i < MEMORY_SIZE; i++) {
        memory[i] = -1; // Initialize memory to -1 (indicating free space)
    }
}

void bestFit(int process_id, int size) {
    int min_size = MEMORY_SIZE, min_index = -1;
    for (int i = 0; i < MEMORY_SIZE; i++) {
        if (memory[i] == -1) { // Check for free space
            int j, count = 0;
            for (j = i; j < MEMORY_SIZE && memory[j] == -1; j++) {
                count++;
            }
            if (count >= size && count < min_size) {
                min_size = count;
                min_index = i;
            }
        }
    }
    if (min_index != -1) {
        for (int k = min_index; k < min_index + size; k++) {
            memory[k] = process_id;
        }
        printf("Process %d allocated at memory location %d\n", process_id, min_index);
    } else {
        printf("Insufficient memory to allocate Process %d\n", process_id);
    }
}

int main() {
    initializeMemory();

    printf("Enter number of memory blocks: ");
    scanf("%d", &num_blocks);
    printf("Enter size of each block:\n");
    for (int i = 0; i < num_blocks; i++) {
        scanf("%d", &blocks[i]);
    }

    for (int i = 0; i < num_blocks; i++) {
        int process_id, size;
        printf("Enter process ID and size for Block %d: ", i + 1);
        scanf("%d %d", &process_id, &size);
        bestFit(process_id, size);
    }

    return 0;
}
